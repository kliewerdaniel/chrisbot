name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1
  DOCKER_BUILDKIT: 1

jobs:
  # ==================== QUALITY GATES ====================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint -- --max-warnings 0

      - name: Check TypeScript types
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Check test coverage threshold
        run: npm run test:coverage
        env:
          CI: true

  # ==================== UNIT TESTING ====================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true

      - name: Upload coverage to CodeClimate
        uses: paambaati/codeclimate-action@v5
        if: success() && github.ref == 'refs/heads/main'
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ${{github.workspace}}/coverage/lcov.info:lcov

  # ==================== INTEGRATION TESTING ====================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run UI Tests
        run: npm run test:ui
        env:
          CI: true

      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test-results/
            playwright-report/
            coverage/

  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run dependency audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: github.ref == 'refs/heads/main'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==================== BUILD & PACKAGE ====================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks, unit-tests, integration-tests, security-scan]
    if: success() || (failure() && github.ref == 'refs/heads/main')

    outputs:
      docker_image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/bot-platform
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_BUILD_TIME=${{ github.event.head_commit.timestamp }}
            NEXT_PUBLIC_COMMIT_SHA=${{ github.sha }}
            NEXT_PUBLIC_BRANCH=${{ github.ref_name }}

      - name: Generate build artifact
        run: |
          docker save ${{ vars.DOCKERHUB_USERNAME }}/bot-platform:${{ github.sha }} -o bot-platform.tar
          gzip bot-platform.tar

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: bot-platform.tar.gz
          retention-days: 30

  # ==================== PERFORMANCE MONITORING ====================
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Bundle analyzer
        if: github.ref == 'refs/heads/main'
        run: |
          npm run bundle-analyze
          npx @next/bundle-analyzer --output-dir .next/bundle-analysis/report

      - name: Lighthouse performance check
        uses: treosh/lighthouse-ci-action@v10
        if: github.ref == 'refs/heads/main'
        with:
          urls: |
            http://localhost:3001
          configPath: .lighthouserc.json
          uploadArtifacts: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always() && github.ref == 'refs/heads/main'
        with:
          name: bundle-analysis
          path: .next/bundle-analysis/

  # ==================== DEPLOYMENT ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build, performance-check]
    if: github.ref == 'refs/heads/develop' && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # For now, just simulate deployment
          echo "staging-url=https://bot-staging.onrender.com" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment
          curl -f https://bot-staging.onrender.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build, performance-check]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        id: deploy
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: Deploy to Render, Railway, Fly.io, etc.
          echo "production-url=https://bot.onrender.com" >> $GITHUB_OUTPUT

      - name: Run production smoke tests
        run: |
          sleep 120  # Wait for deployment
          curl -f https://bot.onrender.com/health || exit 1
          curl -f https://bot.onrender.com/api/health || exit 1

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: success() && contains(github.ref, 'tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            - Automated deployment to production
            - Performance optimized bundle
            - Security hardened with latest patches
          draft: false
          prerelease: false

  # ==================== CLEANUP ====================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]

    steps:
      - name: Cleanup old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: 7 days
          skip-tags: true
          skip-recent: 5
