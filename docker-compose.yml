services:
  # Next.js Frontend Application
  bot-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: bot-frontend
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:11434
    depends_on:
      - ollama
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx

  # Ollama Backend Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-backend
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama-models:/models
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_MAX_QUEUE=512
      - OLLAMA_RUNNERS_DIR=/models
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    # GPU support (if available)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Model Download Service (one-time setup)
  ollama-init:
    image: ollama/ollama:latest
    container_name: ollama-init
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - bot-network
    profiles: ["init"]
    command: >
      sh -c "
        echo 'Pulling LLM models for BOT application...'
        ollama pull llama3.2:3b || echo 'Failed to pull llama3.2:3b'
        ollama pull llama3.1:8b || echo 'Failed to pull llama3.1:8b'
        ollama pull codellama:7b-instruct || echo 'Failed to pull codellama:7b-instruct'
        ollama pull mistral:7b || echo 'Failed to pull mistral:7b'
        echo 'Model download complete!'
      "

  # PostgreSQL Database (for future session persistence)
  postgres:
    image: postgres:15-alpine
    container_name: bot-postgres
    environment:
      - POSTGRES_DB=bot_db
      - POSTGRES_USER=bot_user
      - POSTGRES_PASSWORD=secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d bot_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["full-stack"]

  # Redis Cache (for session management)
  redis:
    image: redis:7-alpine
    container_name: bot-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["full-stack"]

volumes:
  ollama_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
